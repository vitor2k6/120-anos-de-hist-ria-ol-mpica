# -*- coding: utf-8 -*-
"""Projeto Final .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gql96RD8wX5G6-Hz2ZQSDjW-EmWra3iM
"""

pip install pandas matplotlib seaborn

# Bibliotecas principais
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configurações de exibição
pd.set_option('display.max_columns', None)
sns.set(style='whitegrid')

# Carregando os dados
athletes = pd.read_csv('athlete_events.csv')
nocs = pd.read_csv('noc_regions.csv')

# Visualizando as primeiras linhas
print("ATHLETE_EVENTS")
display(athletes.head())

print("NOC_REGIONS")
display(nocs.head())

# Informações básicas sobre os datasets
print("\nInformações do Dataframe de atletas:")
athletes.info()

print("\nInformações do Dataframe de regiões:")
nocs.info()

# Verificando Tamanho e Colunas
print(f"\nTotal de linhas em athletes_events: {athletes.shape[0]}")
print(f"Total de colunas em athletes_events: {athletes.shape[1]}")
print(f"Total de linhas em noc_regions: {nocs.shape[0]}")
print(f"Total de colunas em noc_regions: {nocs.shape[1]}")

# Checando valores únicos de anos (como referência temporal)
print("\nAnos únicos (coluna 'Year'):")
print(sorted(athletes['Year'].unique()))

# Evolução do número de atletas por edição dos jogos
athletes_by_year = athletes.groupby("Year")["ID"].nunique().reset_index()
athletes_by_year.columns = ["Year", "Unique Athletes"]

plt.figure(figsize=(12,6))
sns.lineplot(data=athletes_by_year, x="Year", y="Unique Athletes", marker="o")
plt.title("Evolução do Número de Atletas por Edição dos Jogos")
plt.xlabel("Ano")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Distribuição de medalhas por país (Top 10)
medals = athletes.dropna(subset=["Medal"])
top_countries = medals["NOC"].value_counts().head(10)

plt.figure(figsize=(10,5))
sns.barplot(x=top_countries.values, y=top_countries.index, palette="viridis")
plt.title("Top 10 Países com Mais Medalhas")
plt.xlabel("Número de Medalhas")
plt.ylabel("País (NOC)")
plt.tight_layout()
plt.show()

# Comparação de atletas por sexo ao longo dos anos
gender_year = athletes.groupby(["Year","Sex"])["ID"].nunique().reset_index()
gender_year.columns = ["Year","Sex","Unique Athletes"]

plt.figure(figsize=(12,6))
sns.lineplot(data=gender_year, x="Year", y="Unique Athletes", hue="Sex", marker="o")
plt.title("Participação de atletas por sexo ao longo dos anos")
plt.ylabel("Número de atletas")
plt.xlabel("Ano")
plt.tight_layout()
plt.show()

# Análise de altura e peso dos atletas por esporte
plt.figure(figsize=(12,6))
sample = athletes.dropna(subset=["Height", "Weight"]).sample(3000) # para não pesar o gráfico
sns.scatterplot(data=sample, x="Height", y="Weight", hue="Sex", alpha=0.6)
plt.title("Dispersão entre altura e peso dos atletas")
plt.xlabel("Altura (cm)")
plt.ylabel("Peso (kg)")
plt.tight_layout()
plt.show()

# Idade média dos atletas por esporte (Top 15 mais populares)
top_sports = athletes["Sport"].value_counts().head(15).index
sport_age = athletes[athletes["Sport"].isin(top_sports)].groupby("Sport")["Age"].mean().sort_values()

plt.figure(figsize=(10,6))
sns.barplot(x=sport_age.values, y=sport_age.index, palette="magma")
plt.title("Idade média dos atletas por esportes (Top 15)")
plt.xlabel("Idade média")
plt.ylabel("Esporte")
plt.tight_layout()
plt.show()

# Verificando valores ausentes
missing = athletes.isnull().sum()
print("Valores ausentes por coluna:")
print(missing[missing > 0])

# Substituir medalhas ausentes por "No Medal"
athletes["Medal"].fillna("No Medal", inplace=True)

# Remover registros com altura, peso ou idade ausentes (ou você pode optar por imputação)
athletes = athletes.dropna(subset=["Age", "Height", "Weight"])

# Verificar de novo
print("\nÁpos o tratamento:")
print(athletes.isnull().sum())

# Transformar colunas categóricas para lowercase
athletes["Sex"] = athletes["Sex"].str.upper()
athletes["Medal"] = athletes["Medal"].str.title()

# Coluna "Year" é numérica, mas podemos criar uma coluna de data se necessário
athletes["Year"] = athletes["Year"].astype(int)
athletes["Edition_Date"] = pd.to_datetime(athletes["Year"], format="%Y")

# Confirmar tipos:
print("\nTipos de dados atualizados:")
print(athletes.dtypes)

# Altura está em cm, converter para metros para o cálculo
athletes["Height_m"] = athletes["Height"] / 100
athletes["BMI"] = (athletes["Weight"] / (athletes["Height_m"] ** 2)).round(2)

def age_group(age):
    if age < 18:
      return "Menor de idade"
    elif age < 25:
      return "Jovem"
    elif age <= 35:
      return "Adulto"
    else:
      return "Veterano"

athletes["Age_Group"] = athletes["Age"].apply(age_group)

print("\nVisualização final das colunas:")
display(athletes.head())

import plotly.express as px

# Evolução do número de atletas por ano
athletes_by_year = athletes.groupby("Year")["ID"].nunique().reset_index()
fig = px.line(athletes_by_year, x="Year", y="ID", title="Evolução do Número de Atletas nos Jogos Olímpicos", markers=True)
fig.update_layout(yaxis_title="Número de Atletas")
fig.show()

# Medalhas Por País (Top 10)
top10_medals = athletes[athletes["Medal"] != "No Medal"]["NOC"].value_counts().head(10).reset_index()
top10_medals.columns = ["Country", "Medals"]

fig = px.bar(top10_medals, x="Country", y="Medals", title="Top 10 países com mais medalhas", color="Medals")
fig.show()

# Proporção de atletas por sexo
sex_counts = athletes["Sex"].value_counts().reset_index()
sex_counts.columns = ["Sex", "Counts"]

fig = px.pie(sex_counts, names="Sex", values="Counts", title="Distribuição de atletas por sexo", hole=0.3)
fig.show()

# Distribuição de IMC (BMI) por grupo etário
fig = px.box(athletes, x="Age_Group", y="BMI", color="Age_Group", title="Distribuição de IMC por faixa etária")
fig.update_layout(xaxis_title="Grupo Etário", yaxis_title="IMC")
fig.show()

# Mapa de medalhas por país
medals_country = athletes[athletes["Medal"] != "No Medal"].groupby("NOC")["ID"].count().reset_index()
medals_country.columns = ["NOC", "Medals"]
medals_map = medals_country.merge(nocs, how="left", on="NOC")

fig = px.choropleth(
    medals_map,
    locations="NOC",
    color="Medals",
    hover_name="region",
    title="Mapa de medalhas por país (histórico olímpico)",
    color_continuous_scale="YlOrRd"
)
fig.show()

# Exportar os dados tratados para CSV
athletes.to_csv("athletes_clean.csv", index=False)